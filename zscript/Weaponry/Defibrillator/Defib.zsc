const HDLD_DEFIB="dfb";

class HDefib:HDCellWeapon{
default{
		+WEAPON.MELEEWEAPON +WEAPON.NOALERT +WEAPON.NO_AUTO_SWITCH
		obituary "%o was... somehow killed by %k?";
		inventory.pickupmessage "You got the Defib! Zap-Zap!";
		weapon.selectionorder 100;
		weapon.kickback 120;
		weapon.bobstyle "Alpha";
		weapon.bobspeed 2.6;
		weapon.bobrangex 0.1;
		weapon.bobrangey 0.5;
		weapon.slotnumber 9;
		weapon.slotpriority 3700;
		tag "Defib";
		hdweapon.refid HDLD_DEFIB;
	}
	
	
	override void ownerdied(){
	if(dfb_drop_on_death)
		owner.dropinventory(self);
	}
	
	override bool AddSpareWeapon(actor newowner){return AddSpareWeaponRegular(newowner);}
	override hdweapon GetSpareWeapon(actor newowner,bool reverse,bool doselect){return GetSpareWeaponRegular(newowner,reverse,doselect);}
	override void tick(){
		super.tick();
	}
	override double gunmass(){
		return 10+(weaponstatus[DEFIB_BATTERY]<0?0:2);
	}
	override double weaponbulk(){
		return 50+(weaponstatus[1]>=0?ENC_BATTERY_LOADED:0);
	}
	override void DrawHUDStuff(HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl){
		if(sb.hudlevel==1){
			sb.drawbattery(-54,-4,sb.DI_SCREEN_CENTER_BOTTOM,reloadorder:true);
			sb.drawnum(hpl.countinv("HDBattery"),-46,-8,sb.DI_SCREEN_CENTER_BOTTOM);
		}
		int bat=hdw.weaponstatus[DEFIB_BATTERY];
		if(bat>0)sb.drawwepnum(bat,20);
		else if(!bat)sb.drawstring(
			sb.mamountfont,"00000",
			(-16,-9),sb.DI_TEXT_ALIGN_RIGHT|sb.DI_TRANSLATABLE|sb.DI_SCREEN_CENTER_BOTTOM,
			Font.CR_DARKGRAY
		);}
override void failedpickupunload(){
		failedpickupunloadmag(DEFIB_BATTERY,"HDBattery");
	}
override void consolidate(){
	CheckBFGCharge(DEFIB_BATTERY);
	}
	override void initializewepstats(bool idfa){
		weaponstatus[DEFIB_BATTERY]=20;
	}
	action void A_DefibZap(){
		int battery=invoker.weaponstatus[DEFIB_BATTERY];
		if(battery<1){
			setweaponstate("nope");}
		else{
		bool HasPlayedSound;
		double MaxRange = HDCONST_ONEMETRE * 5;

		BlockThingsIterator it = BlockThingsIterator.Create(self, MaxRange);
		while (it.Next())
		{
			if (Distance3D(it.thing) > MaxRange)
			{
				continue;
			}
			
			HDPlayerCorpse PCorpse = HDPlayerCorpse(it.thing);
			if (PCorpse && PCorpse.corpsegiver)
			{
				if (!HasPlayedSound)
				{
					A_StartSound("weapons/defibuse",CHAN_WEAPON);
					HasPlayedSound = true;
				}

				PCorpse.corpsegiver.respawndelay = 0;
				PCorpse.A_SpawnItemEx("DefibRing",-32,SXF_NOCHECKPOSITION);
				invoker.weaponstatus[DEFIB_BATTERY]--;
			}
		}}
		}
states
{
	select0:
		DEFB A 0;
		goto select0big;
	deselect0:
		DEFB A 0;
		goto deselect0big;
ready:
		DEFB A 1 A_WeaponReady(WRF_ALL&~WRF_ALLOWUSER1);
	goto readyend;
fire:
	DEFB A 0; //{if(hd_pof==false){A_WeaponMessage("\cgThis equipment requires POF (Power of Friendship) to be on!",100);};};
	DEFB B 1; //offset(0,32);
	DEFB A 1; //A_StrengthTics(0,2);
	DEFB B 1; //A_Recoil(min(0,1.-invoker.strength));
	DEFB C 1;
	DEFB D 1;
	DEFB E 1;
	DEFB F 1;
	DEFB G 1;
	DEFB H 1;
	DEFB I 1;
	DEFB J 5 A_DefibZap;
	DEFB K 1;
	DEFB J 1;
	DEFB I 1;
	DEFB H 1;
	DEFB G 1;
	DEFB F 1;
	DEFB E 1;
	DEFB D 1;
	DEFB C 1;
	DEFB B 1;
	DEFB A 1;
	goto ready;
	
	//THUNDERBUSTER CODE
	unload:
		#### A 0{
			invoker.weaponstatus[0]|=DEFIB_JUSTUNLOAD;
			if(invoker.weaponstatus[DEFIB_BATTERY]>=0)
				return resolvestate("unmag");
			return resolvestate("nope");
		}
	unmag:
		#### A 2 offset(0,33){
			A_SetCrosshair(21);
			A_MuzzleClimb(frandom(-1.2,-2.4),frandom(1.2,2.4));
		}
		#### A 3 offset(0,35);
		#### A 2 offset(0,40) A_StartSound("weapons/plasopen",8);
		#### A 0{
			int bat=invoker.weaponstatus[DEFIB_BATTERY];
			A_MuzzleClimb(frandom(-1.2,-2.4),frandom(1.2,2.4));
			if(
				(
					bat<0
				)||(
					!PressingUnload()&&!PressingReload()
				)
			)return resolvestate("dropmag");
			return resolvestate("pocketmag");
		}

	dropmag:
		---- A 0{
			int bat=invoker.weaponstatus[DEFIB_BATTERY];
			invoker.weaponstatus[DEFIB_BATTERY]=-1;
			if(bat>=0){
				HDMagAmmo.SpawnMag(self,"HDBattery",bat);
			}
		}goto magout;

	pocketmag:
		---- A 0{
			int bat=invoker.weaponstatus[DEFIB_BATTERY];
			invoker.weaponstatus[DEFIB_BATTERY]=-1;
			if(bat>=0){
				HDMagAmmo.GiveMag(self,"HDBattery",bat);
			}
		}
		#### A 8 offset(0,43) A_StartSound("weapons/pocket",9);
		#### A 8 offset(0,42) A_StartSound("weapons/pocket",9);
		goto magout;

	magout:
		---- A 0 A_JumpIf(invoker.weaponstatus[0]&DEFIB_JUSTUNLOAD,"Reload3");
		goto loadmag;

	reload:
		#### A 0{
			invoker.weaponstatus[0]&=~DEFIB_JUSTUNLOAD;
			if(
				invoker.weaponstatus[DEFIB_BATTERY]<20
				&&countinv("HDBattery")
			)setweaponstate("unmag");
		}goto nope;

	loadmag:
		#### A 12 offset(0,42);
		#### A 2 offset(0,43){if(health>39)A_SetTics(0);}
		#### AA 2 offset(0,42);
		#### A 2 offset(0,44) A_StartSound("weapons/pocket",9);
		#### A 4 offset(0,43) A_StartSound("weapons/pocket",9);
		#### A 6 offset(0,42);
		#### A 8 offset(0,38)A_StartSound("weapons/plasload",8);
		#### A 4 offset(0,37){if(health>39)A_SetTics(0);}
		#### A 4 offset(0,36)A_StartSound("weapons/plasclose",8);

		#### A 0{
			let mmm=HDMagAmmo(findinventory("HDBattery"));
			if(mmm)invoker.weaponstatus[DEFIB_BATTERY]=mmm.TakeMag(true);
		}goto reload3;

	reload3:
		#### A 6 offset(0,40) A_StartSound("weapons/plasclose2",8);
		#### A 2 offset(0,36);
		#### A 4 offset(0,33);
		goto nope;

	user3:
		#### A 0 A_MagManager("HDBattery");
		goto ready;
    spawn:
		DEFG A -1 nodelay;
		stop;
}
}

enum defibstatus{
DEFIB_JUSTUNLOAD=2,
DEFIB_BATTERY=1,
};

//Funny Effects! Haha!
class DefibOrb:IdleDummy{
 default
 {+Missile
 +NoGravity
 +NoBlockmap
 +NoInteraction
 -Solid
 Radius 0;
 Height 0;
 //RenderStyle Add;
 renderstyle "add";
 Alpha 0.01;
 YScale 0.1;
 XScale 0.1;
}
 States
 {
  Spawn:
   LRFX AAAAA 1 Bright A_FadeIn(0.2);
   LRFX AAAAAAAAAAAAAAAA 1 Bright A_FadeOut(0.07);
   Stop;
 }
}

class DefibRing:IdleDummy{
	default{+NoBlockMap +NoGravity +NoSector +NoInteraction +NoClip -Solid +CLIENTSIDEONLY}
        states
        {
        Spawn:
           //Active:
        	TNT1 A 0;
        	TNT1 A 0 A_SpawnItemEx ("DefibOrb", 32, 0, 0, 0, 0, 4, 0, SXF_TRANSFERTRANSLATION | SXF_CLIENTSIDE, 0); 
        	TNT1 A 0 A_SpawnItemEx ("DefibOrb", 32, 0, 0, 0, 0, 4, 10, SXF_TRANSFERTRANSLATION | SXF_CLIENTSIDE, 0); 
        	TNT1 A 0 A_SpawnItemEx ("DefibOrb", 32, 0, 0, 0, 0, 4, 20, SXF_TRANSFERTRANSLATION | SXF_CLIENTSIDE, 0); 
        	TNT1 A 0 A_SpawnItemEx ("DefibOrb", 32, 0, 0, 0, 0, 4, 30, SXF_TRANSFERTRANSLATION | SXF_CLIENTSIDE, 0); 
        	TNT1 A 0 A_SpawnItemEx ("DefibOrb", 32, 0, 0, 0, 0, 4, 40, SXF_TRANSFERTRANSLATION | SXF_CLIENTSIDE, 0);                                 
        	TNT1 A 0 A_SpawnItemEx ("DefibOrb", 32, 0, 0, 0, 0, 4, 50, SXF_TRANSFERTRANSLATION | SXF_CLIENTSIDE, 0);         
            TNT1 A 0 A_SpawnItemEx ("DefibOrb", 32, 0, 0, 0, 0, 4, 60, SXF_TRANSFERTRANSLATION | SXF_CLIENTSIDE, 0); 
          	TNT1 A 0 A_SpawnItemEx ("DefibOrb", 32, 0, 0, 0, 0, 4, 70, SXF_TRANSFERTRANSLATION | SXF_CLIENTSIDE, 0); 
          	TNT1 A 0 A_SpawnItemEx ("DefibOrb", 32, 0, 0, 0, 0, 4, 80, SXF_TRANSFERTRANSLATION | SXF_CLIENTSIDE, 0); 
          	TNT1 A 0 A_SpawnItemEx ("DefibOrb", 32, 0, 0, 0, 0, 4, 90, SXF_TRANSFERTRANSLATION | SXF_CLIENTSIDE, 0); 
          	TNT1 A 0 A_SpawnItemEx ("DefibOrb", 32, 0, 0, 0, 0, 4,100, SXF_TRANSFERTRANSLATION | SXF_CLIENTSIDE, 0); 
        	TNT1 A 0 A_SpawnItemEx ("DefibOrb", 32, 0, 0, 0, 0, 4,110, SXF_TRANSFERTRANSLATION | SXF_CLIENTSIDE, 0); 
        	TNT1 A 0 A_SpawnItemEx ("DefibOrb", 32, 0, 0, 0, 0, 4,120, SXF_TRANSFERTRANSLATION | SXF_CLIENTSIDE, 0); 
        	TNT1 A 0 A_SpawnItemEx ("DefibOrb", 32, 0, 0, 0, 0, 4,130, SXF_TRANSFERTRANSLATION | SXF_CLIENTSIDE, 0); 
        	TNT1 A 0 A_SpawnItemEx ("DefibOrb", 32, 0, 0, 0, 0, 4,140, SXF_TRANSFERTRANSLATION | SXF_CLIENTSIDE, 0);                                 
        	TNT1 A 0 A_SpawnItemEx ("DefibOrb", 32, 0, 0, 0, 0, 4,150, SXF_TRANSFERTRANSLATION | SXF_CLIENTSIDE, 0);         
            TNT1 A 0 A_SpawnItemEx ("DefibOrb", 32, 0, 0, 0, 0, 4,160, SXF_TRANSFERTRANSLATION | SXF_CLIENTSIDE, 0); 
          	TNT1 A 0 A_SpawnItemEx ("DefibOrb", 32, 0, 0, 0, 0, 4,170, SXF_TRANSFERTRANSLATION | SXF_CLIENTSIDE, 0); 
          	TNT1 A 0 A_SpawnItemEx ("DefibOrb", 32, 0, 0, 0, 0, 4,180, SXF_TRANSFERTRANSLATION | SXF_CLIENTSIDE, 0); 
          	TNT1 A 0 A_SpawnItemEx ("DefibOrb", 32, 0, 0, 0, 0, 4,190, SXF_TRANSFERTRANSLATION | SXF_CLIENTSIDE, 0);                                         
			TNT1 A 0 A_SpawnItemEx ("DefibOrb", 32, 0, 0, 0, 0, 4,200, SXF_TRANSFERTRANSLATION | SXF_CLIENTSIDE, 0);           
			TNT1 A 0 A_SpawnItemEx ("DefibOrb", 32, 0, 0, 0, 0, 4,210, SXF_TRANSFERTRANSLATION | SXF_CLIENTSIDE, 0);                     
            TNT1 A 0 A_SpawnItemEx ("DefibOrb", 32, 0, 0, 0, 0, 4,220, SXF_TRANSFERTRANSLATION | SXF_CLIENTSIDE, 0);                     
            TNT1 A 0 A_SpawnItemEx ("DefibOrb", 32, 0, 0, 0, 0, 4,230, SXF_TRANSFERTRANSLATION | SXF_CLIENTSIDE, 0);
            TNT1 A 0 A_SpawnItemEx ("DefibOrb", 32, 0, 0, 0, 0, 4,240, SXF_TRANSFERTRANSLATION | SXF_CLIENTSIDE, 0);
            TNT1 A 0 A_SpawnItemEx ("DefibOrb", 32, 0, 0, 0, 0, 4,250, SXF_TRANSFERTRANSLATION | SXF_CLIENTSIDE, 0);                              
            TNT1 A 0 A_SpawnItemEx ("DefibOrb", 32, 0, 0, 0, 0, 4,260, SXF_TRANSFERTRANSLATION | SXF_CLIENTSIDE, 0);
            TNT1 A 0 A_SpawnItemEx ("DefibOrb", 32, 0, 0, 0, 0, 4,270, SXF_TRANSFERTRANSLATION | SXF_CLIENTSIDE, 0);
            TNT1 A 0 A_SpawnItemEx ("DefibOrb", 32, 0, 0, 0, 0, 4,280, SXF_TRANSFERTRANSLATION | SXF_CLIENTSIDE, 0);
            TNT1 A 0 A_SpawnItemEx ("DefibOrb", 32, 0, 0, 0, 0, 4,290, SXF_TRANSFERTRANSLATION | SXF_CLIENTSIDE, 0);
            TNT1 A 0 A_SpawnItemEx ("DefibOrb", 32, 0, 0, 0, 0, 4,300, SXF_TRANSFERTRANSLATION | SXF_CLIENTSIDE, 0);                
            TNT1 A 0 A_SpawnItemEx ("DefibOrb", 32, 0, 0, 0, 0, 4,310, SXF_TRANSFERTRANSLATION | SXF_CLIENTSIDE, 0);
            TNT1 A 0 A_SpawnItemEx ("DefibOrb", 32, 0, 0, 0, 0, 4,320, SXF_TRANSFERTRANSLATION | SXF_CLIENTSIDE, 0);
            TNT1 A 0 A_SpawnItemEx ("DefibOrb", 32, 0, 0, 0, 0, 4,330, SXF_TRANSFERTRANSLATION | SXF_CLIENTSIDE, 0);
            TNT1 A 0 A_SpawnItemEx ("DefibOrb", 32, 0, 0, 0, 0, 4,340, SXF_TRANSFERTRANSLATION | SXF_CLIENTSIDE, 0);               
            TNT1 A 4 A_SpawnItemEx ("DefibOrb", 32, 0, 0, 0, 0, 4,350, SXF_TRANSFERTRANSLATION | SXF_CLIENTSIDE, 0);               
        	Stop;
        }     
        
}

class LingeringDefibThunder:IdleDummy{
	int startingstamina;
	default{
		stamina 16;
	}
	override void postbeginplay(){
		super.postbeginplay();
		startingstamina=stamina;
	}
	void A_Zap(){
		if(stamina<1){destroy();return;}
		stamina-=5;
		blockthingsiterator zit=blockthingsiterator.create(self,96+(stamina>>2));
		int icount=0;
		bool haszapped=false;
		while(zit.next()){
			actor zt=zit.thing;
			if(
				!zt
				||(!zt.bshootable&&!zt.bsolid)
				||abs(zt.pos.z-pos.z)>96
				||zt.floorz+(stamina>>2)<zt.pos.z
				||random(0,3)
				||!checksight(zt)
			)continue;
			haszapped=true;
			int zappower=Zap(zt,self,target,stamina);
			stamina-=max(2,zappower>>3);
		}
		if(!haszapped){
			double oldrad=radius;
			a_setsize(stamina,height);
			Zap(self,self,target,stamina,true);
			a_setsize(oldrad,height);
		}
		A_SetTics(max(1,min(random(4,24),int(sqrt(startingstamina-stamina)))));
	}
	static int Zap(actor victim,actor inflictor,actor source,int baseamount,bool nodmg=false){
		//create arc
		double ztr=victim.radius;
		vector3 nodes[4];
		int len=min(35,baseamount);
		nodes[0]=victim.pos+(frandom(-ztr,ztr),frandom(-ztr,ztr),frandom(0,victim.height));
		nodes[1]=nodes[0]+(frandom(-len,len),frandom(-len,len),frandom(-len,len));
		nodes[2]=nodes[1]+(frandom(-len,len),frandom(-len,len),frandom(-(len>>1),len));
		nodes[3]=nodes[2]+(frandom(-len,len),frandom(-len,len),frandom(-len*2/3,(len>>1)));
		for(int i=1;i<4;i++){
			vector3 pastnode=nodes[i-1];
			vector3 particlepos=nodes[i]-pastnode;
			int iterations=int(particlepos.length());
			vector3 particlemove=particlepos/iterations;
			particlepos=pastnode-victim.pos;
			for(int i=0;i<iterations;i++){
				victim.A_SpawnParticle("white",
					SPF_RELATIVE|SPF_FULLBRIGHT,(len>>1),frandom(1,7),0,
					particlepos.x,particlepos.y,particlepos.z,
					frandom(-0.1,0.1),frandom(-0.1,0.1),frandom(0.1,0.2),
					frandom(-0.1,0.1),frandom(-0.1,0.1),-0.05
				);
				particlepos+=particlemove+(frandom(-1,1),frandom(-1,1),frandom(-1,1));
			}
		}

		int zappower=random(baseamount>>2,baseamount);
		victim.A_StartSound("weapons/plasidle",CHAN_AUTO,volume:frandom(0.2,0.6));
		victim.A_StartSound("misc/arccrackle",CHAN_AUTO);
		victim.A_StartSound("weapons/plascrack",CHAN_AUTO,volume:frandom(0.2,0.6));
		actor bsfl=spawn("BeamSpotFlashLight",victim.pos,ALLOW_REPLACE);
		bsfl.target=victim;

		return zappower;
	}
	states{
	spawn:
		TNT1 A 1 A_Zap();
		wait;
	}
}